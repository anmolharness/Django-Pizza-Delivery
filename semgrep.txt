                    
                    
┌──────────────────┐
│ 12 Code Findings │
└──────────────────┘
                               
  [36m[22m[24m  bs-config.js[0m
    ❯❱ [1mjavascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop[0m
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
           38┆ output = output[element];
   
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular 
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           60┆ let regex = RegExp(pattern);
                           
  [36m[22m[24m  build.js[0m
    ❯❱ [1mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal[0m
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          158┆ const origin = path.join(from, file);
            ⋮┆----------------------------------------
          158┆ const origin = path.join(from, file);
            ⋮┆----------------------------------------
          159┆ const dest = path.join(to, file);
            ⋮┆----------------------------------------
          159┆ const dest = path.join(to, file);
                                      
  [36m[22m[24m  inline-resources.js[0m
    ❯❱ [1mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal[0m
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           50┆ const fullFilePath = path.join(projectPath, filePath);
            ⋮┆----------------------------------------
           50┆ const fullFilePath = path.join(projectPath, filePath);
            ⋮┆----------------------------------------
           55┆ return path.join(path.dirname(fullFilePath), url);
            ⋮┆----------------------------------------
           55┆ return path.join(path.dirname(fullFilePath), url);
   
    ❯❱ [1mjavascript.browser.security.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/7ope                                                                     
                                                                                                           
          102┆ const urls = eval(styleUrls);
                                      
  [36m[22m[24m  src/demo/index.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           13┆ <script src="https://www.connectcdk.com/app/platform/components/coms/cvr.client.agent/adp.d
               s.cvr.client.agent.min.js"></script>                                                       
